{"componentChunkName":"component---src-template-blog-post-template-js","path":"/blog/run-multiple-docker-container-on-one-server/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>我这个博客部署在<a href=\"https://cloud.tencent.com/act/cps/redirect?redirect=10000&#x26;cps_key=b0a7eeccce7dad92a29f01053bb1e571\">腾讯云服务器</a>, 对应的域名是 kejiweixun.com, 但我这个服务器还部署了其他网站或程序, 可以分别通过不同的域名访问.</p>\n<p>kejiweixun.com 这个网站已经 docker 化了, 我还分享了 gatsby 网站 docker 化的<a href=\"https://kejiweixun.com/blog/deploy-gatsby-website-with-docker/\">方法</a>, 通过 docker 部署感觉很方便, 所以我也把其他网站和程序都 docker 化了, 现在我的服务器运行的网站或程序都是一个个的 docker 容器.</p>\n<p>于是问题来了, 一个服务器运行多个 docker 容器, 并且让这些容器通过独立的域名访问, 怎么做到的?</p>\n<p>当然是用 nginx 啦. 把所有这些域名 dns 指向服务器的 ip 地址, 在服务器安装 nginx, 所有访问这个 ip 地址的流量首先经过 nginx, nginx 根据这些流量所对应的域名, 把流量转发给相对应的网站或程序. 例如访问 kejiweixun.com 的用户, 会被 nginx 转给 kejiweixun.com 这个 docker 容器.</p>\n<p>既然服务器的网站和程序都可以 docker 化, 那这个负责转发流量的 nginx 服务器可以 docker 化吗? 当然可以啦! 事实上早就有人思考过这个问题了, 有人把这个 nginx 服务器配置完之后, docker 化成一个 image, 并开源给大家使用, 其中一个是 <a href=\"https://hub.docker.com/r/jwilder/nginx-proxy/dockerfile\">jwilder/nginx-proxy</a>.</p>\n<h2>jwilder/nginx-proxy 如何使用</h2>\n<h3>前提</h3>\n<p>首先你要知道怎么 docker 化一个网站或程序, 可参考我的 gatsby 网站 docker 化<a href=\"https://kejiweixun.com/blog/deploy-gatsby-website-with-docker/\">方法</a>, 这里假设我已经创建了两个网站的 docker image, 分别叫 kejiweixun.com/blog1 和 kejiweixun.com/blog2, 假设要分别通过 blog1.kejiweixun.com 和 blog2.kejiweixun.com 访问, 当然不一定是两个子域名, 也可以是两个一级域名.</p>\n<h3>第一步: 创建网络</h3>\n<p>参考<a href=\"https://github.com/jwilder/nginx-proxy\">官方文档</a>, 首先创建一个叫 nginx-proxy (也可以起其他名称) 的网络, 执行:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker network create nginx-proxy</code></pre></div>\n<h3>第二步: 运行 proxy</h3>\n<p>按照官方的文档, 接下来应该是下载并运行 jwilder/nginx-proxy 这个 image, 如下所示, 但并<strong>不建议</strong>这样做:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run --rm -d -p <span class=\"token number\">80</span>:80 --name nginx --net nginx-proxy -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy</code></pre></div>\n<p>这条命令包含一段 <code class=\"language-text\">-v /var/run/docker.sock:/tmp/docker.sock:ro</code> 的特殊属性, 意思是把宿主 (即你的电脑或云服务器等) 的 docker socket 映射到容器中, 让容器可以读取宿主的 docker socket, 这种做法相当于<a href=\"https://news.ycombinator.com/item?id=17983623\">让容器拥有了对整个宿主的控制权</a>, 而 jwilder/nginx-proxy 这个容器是暴露在网络中的, 所以存在安全隐患.</p>\n<p>为了解决这个问题, jwilder/nginx-proxy 提供了<a href=\"https://github.com/jwilder/nginx-proxy#separate-containers\">第二种配置方式</a>: 把 jwilder/nginx-proxy 拆分成 nginx 和 jwilder/docker-gen 两个容器运行, 其中 nginx 是对外的, 但它不直接绑定 docker socket, 而是通过 jwilder/docker-gen 绑定, 而 jwilder/docker-gen 在背后支持 nginx 运行, 不暴露在外网中.</p>\n<p>按照官方文档, 如果你在乎安全性问题, 不要执行前面那条命令, 应该执行:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run --rm -d -p <span class=\"token number\">80</span>:80 --name nginx --net nginx-proxy -v /tmp/nginx:/etc/nginx/conf.d -t nginx</code></pre></div>\n<p>上面这条命令启动第一个容器 nginx, 注意通过 <code class=\"language-text\">--net nginx-proxy</code> 告诉这个 container 基于刚刚创建的网络运行. 运行 <code class=\"language-text\">docker run</code> 时, 如果本地电脑或服务器没有相应的 image, 会自动从 docker hub 下载, 下载完成后自动运行. -p 表示端口, 第一个 80 端口是服务器的端口, 你可以设置为其他值, 但建议 80, 因为这样访问域名时就不需要在域名最后加 <code class=\"language-text\">:80</code> 这样的东西, 第二个是容器 nginx 暴露出来的端口, 不是我们定义的, 不能随意改动.</p>\n<h3>第三步: 运行 docker-gen</h3>\n<p>接着启动第二个容器 jwilder/docker-gen:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run --rm -d --volumes-from nginx <span class=\"token punctuation\">\\</span>\n    --net nginx-proxy <span class=\"token punctuation\">\\</span>\n    -v /var/run/docker.sock:/tmp/docker.sock:ro <span class=\"token punctuation\">\\</span>\n    -v <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span>:/etc/docker-gen/templates <span class=\"token punctuation\">\\</span>\n    -t jwilder/docker-gen -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf</code></pre></div>\n<p>你可以看到这个容器绑定了 docker socket, 但正如前面所说, 这个容器不暴露在外网.</p>\n<h3>第四步: 运行网站容器</h3>\n<p>最后再分别运行 kejiweixun.com/blog1 和 kejiweixun.com/blog2 这两个容器, 继续参考官方文档, 逐一执行以下两条命令:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -d --rm --expose <span class=\"token number\">80</span> --net nginx-proxy -e <span class=\"token assign-left variable\">VIRTUAL_HOST</span><span class=\"token operator\">=</span>blog1.kejiweixun.com kejiweixun.com/blog1\ndocker run -d --rm --expose <span class=\"token number\">80</span> --net nginx-proxy -e <span class=\"token assign-left variable\">VIRTUAL_HOST</span><span class=\"token operator\">=</span>blog2.kejiweixun.com kejiweixun.com/blog2</code></pre></div>\n<p>如果你已经把域名都指向了宿主的 ip 地址, 那现在应该可以分别通过这两个域名访问这两个网站.</p>\n<p>如果你是在本地电脑测试, 还没有部署到云服务器, 那把 blog1.kejiweixun.com 和 blog2.kejiweixun.com 分别更换为 blog1.localhost 和 blog2.localhost:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -d --rm --expose <span class=\"token number\">80</span> --net nginx-proxy -e <span class=\"token assign-left variable\">VIRTUAL_HOST</span><span class=\"token operator\">=</span>blog1.localhost kejiweixun.com/blog1\ndocker run -d --rm --expose <span class=\"token number\">80</span> --net nginx-proxy -e <span class=\"token assign-left variable\">VIRTUAL_HOST</span><span class=\"token operator\">=</span>blog2.localhost kejiweixun.com/blog2</code></pre></div>\n<p>然后在浏览器输入 blog1.localhost 和 blog2.localhost 就可以分别访问 blog1 和 blog2.</p>\n<h3>第五步: 通过 docker compose 运行</h3>\n<p>手动输入这么长的命令有点麻烦, 而且容易忘记, 建议把这些命令记录在 docker-compose.yml 文件, 文件内容如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.7\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">blog1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> kejiweixun.com/blog1\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> blog1\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> VIRTUAL_HOST=blog1.localhost\n    <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx<span class=\"token punctuation\">-</span>proxy\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n  <span class=\"token key atrule\">blog2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> kejiweixun.com/blog2\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> blog2\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> VIRTUAL_HOST=blog2.localhost\n    <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx<span class=\"token punctuation\">-</span>proxy\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n  <span class=\"token key atrule\">nginx</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx<span class=\"token punctuation\">-</span>proxy\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80:80\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> data<span class=\"token punctuation\">:</span>/etc/nginx/conf.d\n  <span class=\"token key atrule\">dockergen</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> jwilder/docker<span class=\"token punctuation\">-</span>gen\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">-</span>gen\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span>notify<span class=\"token punctuation\">-</span>sighup nginx <span class=\"token punctuation\">-</span>watch /etc/docker<span class=\"token punctuation\">-</span>gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx<span class=\"token punctuation\">-</span>proxy\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> data<span class=\"token punctuation\">:</span>/etc/nginx/conf.d\n      <span class=\"token punctuation\">-</span> /var/run/docker.sock<span class=\"token punctuation\">:</span>/tmp/docker.sock<span class=\"token punctuation\">:</span>ro\n      <span class=\"token punctuation\">-</span> ./nginx.tmpl<span class=\"token punctuation\">:</span>/etc/docker<span class=\"token punctuation\">-</span>gen/templates/nginx.tmpl\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nginx-proxy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>proxy</code></pre></div>\n<p>以后每次运行容器, 都只要执行 <code class=\"language-text\">docker-compose up</code>. <code class=\"language-text\">VIRTUAL_HOST</code> 的值分别是 blog1.localhost 和 blog2.localhost, 主要是方便你在本地电脑测试, 当你部署到服务器时记得修改成你打算使用的正式域名.</p>\n<p>需要注意的是, 官方文档表示, 如果你把 jwilder/nginx-proxy 拆分为两个容器的方式部署, 就需要单独新建一个叫 nginx.tmpl 的文件, 内容可以从 github <a href=\"https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl\">复制</a>过来, nginx.tmpl 应该和 docker-compose.yml 在同一目录.</p>\n<p>准备好 docker-compose.yml 和 nginx.tmpl 这两个文件后, 在同一目录下执行 <code class=\"language-text\">docker-compose up -d</code>, 接着就可以在浏览器通过 blog1.localhost 和 blog2.localhost 访问网站了, 省略 <code class=\"language-text\">-d</code> 这个选项可以在命令行工具实时显示访问动态.</p>\n<h3>第六步: 开启 ssl</h3>\n<p>现在还差 ssl 证书, 当然你可以不部署证书, 但不支持 https 可能会被浏览器阻挡访问. 部署方法很简单, 如果你的域名托管在<a href=\"https://cloud.tencent.com/act/cps/redirect?redirect=10000&#x26;cps_key=b0a7eeccce7dad92a29f01053bb1e571\">腾讯云</a>或<a href=\"https://www.aliyun.com/acts/limit-buy?userCode=2tv7qsfy\">阿里云</a>, 那你可以直接在后台申请 ssl 证书, 具体怎么操作不在这篇文章的讨论范围, 文章已经很长了阿..</p>\n<p>证书申请通过之后, 它会给你一个下载链接, 下载下来, 里面有两个文件, 一个 key, 一个 crt, 按照域名 + 后缀的方式重命名, 比如 kejiweixun.com 这个域名的话, 就把证书命名为: kejiweixun.com.crt 和 kejiweixun.com.key, 然后把它放在一个叫 ssl<em>certs 的文件夹中, 这个文件夹的名称你可以自定义. ssl</em>certs 要和 docker-compose.yml 位于同一目录.</p>\n<p>然后把前面的 docker-compose.yml 修改成:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.7\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">blog1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> kejiweixun.com/blog1\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> blog1\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> VIRTUAL_HOST=blog1.localhost\n    <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx<span class=\"token punctuation\">-</span>proxy\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n  <span class=\"token key atrule\">blog2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> kejiweixun.com/blog2\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> blog2\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> VIRTUAL_HOST=blog2.localhost\n    <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx<span class=\"token punctuation\">-</span>proxy\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n  <span class=\"token key atrule\">nginx</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx<span class=\"token punctuation\">-</span>proxy\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80:80\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> data<span class=\"token punctuation\">:</span>/etc/nginx/conf.d\n      <span class=\"token punctuation\">-</span> certs<span class=\"token punctuation\">:</span>/etc/nginx/certs <span class=\"token comment\">#新增</span>\n  <span class=\"token key atrule\">dockergen</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> jwilder/docker<span class=\"token punctuation\">-</span>gen\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">-</span>gen\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span>notify<span class=\"token punctuation\">-</span>sighup nginx <span class=\"token punctuation\">-</span>watch /etc/docker<span class=\"token punctuation\">-</span>gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nginx<span class=\"token punctuation\">-</span>proxy\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> certs<span class=\"token punctuation\">:</span>/etc/nginx/certs <span class=\"token comment\">#新增</span>\n      <span class=\"token punctuation\">-</span> data<span class=\"token punctuation\">:</span>/etc/nginx/conf.d\n      <span class=\"token punctuation\">-</span> /var/run/docker.sock<span class=\"token punctuation\">:</span>/tmp/docker.sock<span class=\"token punctuation\">:</span>ro\n      <span class=\"token punctuation\">-</span> ./nginx.tmpl<span class=\"token punctuation\">:</span>/etc/docker<span class=\"token punctuation\">-</span>gen/templates/nginx.tmpl\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">certs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#新增</span>\n    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> local <span class=\"token comment\">#新增</span>\n    <span class=\"token key atrule\">driver_opts</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#新增</span>\n      <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> none <span class=\"token comment\">#新增</span>\n      <span class=\"token key atrule\">device</span><span class=\"token punctuation\">:</span> /Users/kejiweixun/Desktop/blogs/ssl\\_certs <span class=\"token comment\">#这里替换成你的 ssl\\_certs 文件夹所在的位置, 绝对位置</span>\n      <span class=\"token key atrule\">o</span><span class=\"token punctuation\">:</span> bind <span class=\"token comment\">#新增</span>\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nginx-proxy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>proxy</code></pre></div>\n<p>新增的内容意思是, 声明一个叫作 certs 的 named volume, 然后把 certs 绑定至 ssl<em>certs 文件夹, 相当于把 ssl</em>certs 赋值给 certs 变量, 然后这个 certs 变量就可以用在 blog1 和 blog2 这两个容器, 这样设置完就可以通过 https 访问你的网站, http 也会自动 301 跳转到 https.</p>\n<h2>总结</h2>\n<p>以后如果有更多容器, 只要在 docker-compose.yml 文件中添加这个容器的运行参数即可. 对了, 还有一个叫 <a href=\"https://github.com/SteveLTN/https-portal\">https-portal</a> 的容器, 如果你不喜欢 jwilder/nginx-proxy, 可以看看 https-portal.</p>","frontmatter":{"title":"如何同时运行多个 docker 容器, 并通过不同的域名访问","date":"2019/10/22","slug":"run-multiple-docker-container-on-one-server","description":"这篇文章介绍 jwilder/nginx-proxy 的使用方法, 通过它可实现一台服务器部署多个 docker 容器, 并通过不同的域名访问."}}}]}},"pageContext":{"slug":"run-multiple-docker-container-on-one-server"}},"staticQueryHashes":["1518281631"]}