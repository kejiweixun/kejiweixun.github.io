{"componentChunkName":"component---src-template-blog-post-template-js","path":"/blog/how-to-use-lodash-debounce-function-with-react/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>这篇文章主要分享以下内容: 什么是 debounce 函数? debounce 函数有什么用? 如何写一个 debounce 函数? 如何在 react 使用 debounce 函数?</p>\n<h2>关于 debounce 函数</h2>\n<p>我喜欢顾名思义, bounce 有跳动&#x26;反弹等意思, debounce 就是使之不跳动, debounce 函数可以理解为使一个函数不那么活跃, 具体地说, 就是减少一个函数的执行次数.</p>\n<p>比如在一个 <code class=\"language-text\">&lt;input&gt;</code> 元素中绑定了一个叫 <code class=\"language-text\">onInput</code> 的事件, 当我们把光标定位到输入框, 每一次按下键盘, 这个 onInput 事件都会被触发, 事件对应的函数都会被执行一次.</p>\n<p>事件函数每一次执行可能都要花费很长时间, 例如根据你输入的内容在海量数据中进行查询, 比如你要查询的是 'abc' 这个关键词, 但事实上 onInput 事件会相继地被 'a', 'ab', 'abc' 这三个关键词所触发, 而我们并不需要 'a' 和 'ab' 的查询结果, 于是就产生了资源浪费, 甚至可能会拖慢系统速度.</p>\n<p>比如下面这个例子, 每一次按下键盘都会触发 onInput 事件对应的函数:</p>\n<p><img src=\"/linkedfiles/8bb767e79c6d1f3ecf9b93056720d9cc/bounce.gif\"></p>\n<p>再比如 <code class=\"language-text\">&lt;input type=&quot;range&quot; onChange=&quot;onChangeRange&quot;/&gt;</code>, 我们拖动滑块滑动的过程中 onChangeRange 函数会被不断触发, 触发频率可能高达几十次/秒, 如果  onChangeRange 函数运算复杂, 就可能会影响系统的运行速度, 如果我们不关心拖动滑块<strong>过程中</strong>的事件, 只关心<strong>拖动结束后</strong>的事件, 那就可以对 onChangeRange 进行 debounce, 让它不那么活跃, 减少它的执行次数.</p>\n<p>debounce 的作用如下图所示, 可以看到快速输入过程中事件函数中的关键运算并没有被执行, 只有当停止输入 250ms 之后才执行.</p>\n<p><img src=\"/linkedfiles/d22d8865b3e9a314bc6f36fdbae1ae6f/debounce.gif\"></p>\n<h2>如何写一个 debounce 函数</h2>\n<p>debounce 函数接收一个需要被 debounce 的事件函数以及一个时间作为参数, 最后返回一个新的函数, 其简单的写法可见下方代码.</p>\n<p><code class=\"language-text\">var timeout = null</code> 这行是关键, 在上面这个例子中, 用户每按一次键盘, 都会产生一个新的 timeout ID, 这个 ID 都保存在 <code class=\"language-text\">timeout</code> 这个变量中, 旧的 ID 不断地被 clear, 新的 ID 不断地被赋值给 <code class=\"language-text\">timeout</code>, 当用户停止输入时, 最新的 ID 才不会被 clear, 于是就在一定时间之后执行事件函数.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这是 debounce 函数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounce</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n      timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 这是事件函数, 即需要被 debounce 的函数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inputHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 通过 debounce 函数对事件函数进行 debounce</span>\n  <span class=\"token keyword\">const</span> debounceInput <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>inputHandler<span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// react 需要这样把 e 传递给被 debounce 的事件函数, 即传递给 debounceInput</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onInput</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">debounceInput</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"input\"</span><span class=\"token operator\">></span>输入文字<span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"input\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> onInput<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onInput<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 react 中使用 debounce 的方法是:</p>\n<ul>\n<li>按照以往的思路写 event handler;</li>\n<li>把这个 handler 传入 debounce 函数获得一个被 debounce 的函数;</li>\n<li>把 event 对象通过一个新的 event handler 传入被 debounce 的函数;</li>\n</ul>\n<p>所以从 bounce 切换到 debounce, 基本不需要删除或更改已有的代码, 主要是增加一个 debounce 函数. 这个 debounce 函数可以自己定义, 如上方例子, 但建议用 lodash 版本, 它可接收<a href=\"https://lodash.com/docs/4.17.15#debounce\">更多参数</a>, 有更多选项..</p>\n<p>首先安装:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i --save lodash.debounce</code></pre></div>\n<p>然后在 react 中引入:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> debounce <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash.debounce\"</span></code></pre></div>\n<hr>\n<p>参考资料: <a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\">Debouncing and Throttling Explained Through Examples</a></p>","frontmatter":{"title":"debounce 函数有什么用? 如何在 react 中使用 debounce?","date":"2020/08/13","slug":"how-to-use-lodash-debounce-function-with-react","description":null}}}]}},"pageContext":{"slug":"how-to-use-lodash-debounce-function-with-react"}},"staticQueryHashes":["1518281631"]}