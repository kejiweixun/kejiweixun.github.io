{"componentChunkName":"component---src-template-blog-post-template-js","path":"/blog/how-to-schedule-backup-mongodb-docker-data/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>以 ubuntu 服务器为例. 比如你有一个这样的 docker-compose 文件:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mongo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mongo\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_USERNAME</span><span class=\"token punctuation\">:</span> root\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> example\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 27017<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> mongodb<span class=\"token punctuation\">:</span>/backup\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> local\n    <span class=\"token key atrule\">driver_opts</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> none\n      <span class=\"token key atrule\">device</span><span class=\"token punctuation\">:</span> home/ubuntu/mongodb_backup\n      <span class=\"token key atrule\">o</span><span class=\"token punctuation\">:</span> bind</code></pre></div>\n<p>要备份 mongodb 的数据库, 只需要执行:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker <span class=\"token builtin class-name\">exec</span> -it mongo mongodump -u root -p example --authenticationDatabase<span class=\"token operator\">=</span>admin  -o /backup</code></pre></div>\n<p>这条命令的格式是: <code class=\"language-text\">docker exec [容器名称] [命令]</code>. 这条命令的意思是把数据库保存到容器的 /backup 文件夹, 由于 docker-compose 文件已经把容器的 <code class=\"language-text\">/backup</code> 文件夹映射到服务器的 <code class=\"language-text\">home/ubuntu/mongodb_backup</code> 文件夹, 所以数据备份后, 我们可以直接在服务器的 <code class=\"language-text\">/home/ubuntu/mongodb_backup</code> 看到这些备份下来的数据.</p>\n<p>相当于下面两条命令的组合:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker exec -it mongo /bin/bash\nmongodump -u root -p example --authenticationDatabase=admin  -o /backup</code></pre></div>\n<p>上面这条命令会把 mongodb 的所有数据库的数据都备份下来, 如果要备份指定数据库的数据, 可以添加 <code class=\"language-text\">-d some_db_name</code>.</p>\n<p>为了让这条命令定时执行, 可以先创建一个叫 auto-backup.sh 的文件, 把 <code class=\"language-text\">docker exec mongo mongodump -u root -p example --authenticationDatabase=admin  -o /backup</code> 添加到这个文件, 然后在服务器安装 cron 并设置 cron 定时任务. </p>\n<p>注意, 添加到 cron 任务时, <code class=\"language-text\">docker exec -it</code> 中的<a href=\"https://stackoverflow.com/questions/37089033/docker-exec-is-not-working-in-cron\"> <code class=\"language-text\">-it</code> 要删除</a>.</p>\n<p>具体步骤如下:</p>\n<ul>\n<li>按照惯例先执行: <code class=\"language-text\">apt-get update &amp;&amp; apt-get upgrade</code>;</li>\n<li>看看服务器是否已经安装 cron: <code class=\"language-text\">dpkg -l cron</code>, 如果已经安装, 会显示它的版本号等信息, 如果没有安装会告诉你没有安装;</li>\n<li>如果没有安装, 那执行这条命令安装: <code class=\"language-text\">sudo apt-get install cron</code>;</li>\n<li>安装后, 看看它是否正常运行: <code class=\"language-text\">systemctl status cron</code>;</li>\n<li>设置一下 auto-backup.sh 的权限: <code class=\"language-text\">chmod +x auto-backup.sh</code>;</li>\n<li>然后执行: <code class=\"language-text\">crontab -e</code>, 选择你喜欢使用的文档编辑器, 开始编辑 cron 定时任务;</li>\n<li>把你需要定期执行的任务添加到打开的文件的最后一行, 比如添加 <code class=\"language-text\">*/1 * * * * /home/ubuntu/auto-backup.sh</code>, 意思是每分钟执行一次 auto-backup.sh 以备份数据, 保存这个文件, 注意路径都是绝对路径;</li>\n<li>搞掂.</li>\n</ul>\n<p>当你撘建了一个新的 mongodb 容器, 如果希望把备份下来的数据恢复到这个新的容器中, 只需要把这些数据添加到新的 mongodb 容器, 然后用 mongorestore 命令恢复.</p>","frontmatter":{"title":"如何定时备份 mongodb docker 容器的数据","date":"2020/06/06","slug":"how-to-schedule-backup-mongodb-docker-data","description":null}}}]}},"pageContext":{"slug":"how-to-schedule-backup-mongodb-docker-data"}},"staticQueryHashes":["1518281631"]}