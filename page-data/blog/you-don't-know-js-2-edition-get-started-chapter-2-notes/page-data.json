{"componentChunkName":"component---src-template-blog-post-template-js","path":"/blog/you-don't-know-js-2-edition-get-started-chapter-2-notes/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>You Don't know JS 第二版 Get Started <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md\">第二章</a>笔记.</p>\n<p>一个 js 文件就是一个 js 程序, 这样考虑主要是为了更好地 handle error, 其中一个 js 文件可能因为错误无法运行, 其他 js 文件应该妥善应对这种情况.</p>\n<p>一个程序最基本的信息单元是 value, JS 有两种 value, 分别是 primitive 和 object.</p>\n<p>null 和 undefined 都是 primitive 值, 都表示一种空的意思, 但当你希望表示一个变量是空时通常用 undefined. Symbol 也是一种 primitive 值, 通常用在 object 中作为 property, 主要用在 libries 或 frameworks 中, 我们写代码用得比较少.</p>\n<p>typeof 可以获得一个值的类型, 但 <code class=\"language-text\">typeof null</code> 返回 object 而不是 null, <code class=\"language-text\">typeof []</code> 返回 object 而不是 array. 其他类型的值都准确地返回这个类型的名称, 例如 undefined 就返回 undefined, function 就返回 function. NaN 是一个特别的 number.</p>\n<p>let 是 block scope, var 是 global scope, const 除了是 block scope 之外, 还不能 re-asign, 注意是不能 re-asign, 并不是不能改变变量的值, object value 是可以改变的. 所以作者建议 const 只用来声明那些值是 primitive value 的变量.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'keke'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{name: 'tom'}</span></code></pre></div>\n<p>变量并不一定通过 var let const 声明, 例如 <code class=\"language-text\">function add(a, b){return a + b}</code> 中的 add 是通过 function 声明, 而 a 和 b 甚至没有使用任何关键词, 它们是 function scope 变量. <code class=\"language-text\">try{}catch(err){}</code> 中的 err 也是一个变量, 它是 block scope.</p>\n<p>function declaration 的 identifier 和其对应的 function value 是在 compile 时即关联起来, 而 function expression 的 identifier 和其对应的 function value 是在 runtime 才关联起来.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>js 的 function 可以作为 value 赋值给变量或者作为其他函数的参数传入, 所以 js 支持函数式编程.</p>\n<p><code class=\"language-text\">===</code> 有时候是骗人的, <code class=\"language-text\">NaN === NaN</code> 和 <code class=\"language-text\">0 === -0</code> 返回的结果是都是 false, 这是骗人的, 应该都返回 true.</p>\n<p>可以用 <code class=\"language-text\">Number.isNaN()</code> 判断一个值是不是 <code class=\"language-text\">NaN</code>, 注意和 <code class=\"language-text\">isNaN()</code> 区分, <code class=\"language-text\">isNaN()</code> 判断一个值是不是 number 或可不可以转换成 number. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></code></pre></div>\n<p>另一种比 <code class=\"language-text\">===</code> 更严格的判断值是否相等的方法是 <code class=\"language-text\">Object.is(value1, value2)</code>, 它弥补了 <code class=\"language-text\">===</code> 的两个谎言.</p>\n<p>对象的比较, 包括 Object, Array, Function 的比较, 都是比较 reference.</p>\n<p>JS 的所有 value comparision 都会考虑这个 value 的类型, 但 <code class=\"language-text\">===</code> 在对比时, 不允许两个值进行类型转换, <code class=\"language-text\">==</code>, <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">&gt;=</code>, <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&gt;</code> 这些运算符会先进行类型转换, 再进行对比, 而且只要其中一个 value 是 number, 都会把另一个转换为 number 再对比.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//0</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">//false</span>\n<span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">//false</span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">//true</span></code></pre></div>\n<p>先转换类型, 再对比, 这在 js 是不可避免的, 与其想方设法避免, 不如深入了解它.</p>\n<p>有两种组织 js 代码的模式, 分别是 class 和 module, YDKJS 作者所说的 module 有两种, 一种是 classic module, 有些书写成 factory function, 另一种是 ES module.</p>\n<p>js 中的 class 不是一个 value 类型, 只有 <code class=\"language-text\">new</code> 过之后才生成一个 value, class 是一种特殊的 funciton. class 可以把一些初始数据, 以及这些数据的行为打包组织起来, 让代码看起来更有组织性. class 中有一个特别的方法叫 constructor.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text:\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span>\npage<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//'text: Hello World!'</span></code></pre></div>\n<p>class 可以继承另一个 class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bookDetail</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>bookDetail<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> bookDetail<span class=\"token punctuation\">.</span>title\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> bookDetail<span class=\"token punctuation\">.</span>author\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title:\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author:\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"YDKJS\"</span><span class=\"token punctuation\">,</span>\n  author<span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  text<span class=\"token operator\">:</span> <span class=\"token string\">\"learn about javascript\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nbook<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//title: YDKJS</span>\n<span class=\"token comment\">//author: Tom</span>\n<span class=\"token comment\">//text: learn about javascript</span></code></pre></div>\n<p><code class=\"language-text\">super()</code> 类似 <code class=\"language-text\">new Page()</code>, <code class=\"language-text\">super.print()</code> 类似 <code class=\"language-text\">const in = new Page(); in.print()</code>.</p>\n<p>另一种组织 js 代码的方法叫 module, 分为 classic module 和 ES module. 有些书把 classic module 称为 factory function, YDKJS 还把它叫 module factory. factory function 是那些非 class function 和非 constructor function, 并且返回一个对象的函数.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> text<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">print</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> theBook <span class=\"token operator\">=</span> <span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntheBook<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Hello World!'</span></code></pre></div>\n<p>ES module 和 classic module 的目的和功能差不多, 但是实现方法明显不同.</p>\n<p>classic module 其实就是一个函数, 被函数 wrap 住, 而 ES module 不是一个函数, 而是一个文件, 被一个文件 wrap 住, 一个文件就是一个 module.</p>\n<p>ES module 通过 export 公开它的方法, 没有 export 的内容是 private 的. ES module 也不用实例化, 而是通过 import 使用它的一个实例, 它是 singleton, 自始至终只创建了一个实例. 如果你希望创建多个实例, 那就要在这个 module 文件中 export 一个 classic module 函数.</p>\n<p>后续阅读: mozillar 的 <a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">ES modules: A cartoon deep-dive</a>.</p>","frontmatter":{"title":"YDKJS 2nd 1-2 笔记","date":"2020/06/16","slug":"you-don't-know-js-2-edition-get-started-chapter-2-notes","description":null}}}]}},"pageContext":{"slug":"you-don't-know-js-2-edition-get-started-chapter-2-notes"}}}