{"version":3,"sources":["webpack:///./src/pages/add-watermark.js"],"names":["allColors","someColors","hStyle","miniprogramLink","canvasSectionStyle","controlSectionStyle","buttonsStyle","watermarkInputStyle","watermarkSizeStyle","settingTextContainer","settingIconStyle","settingIconChosenStyle","allColorPickerContainer","settingIcons","setting","icon","rotateRightIcon","value","belongTo","rotateLeftIcon","marginX_lessIcon","marginX_moreIcon","marginY_lessIcon","marginY_moreIcon","top_leftIcon","top_rightIcon","centerIcon","bottom_rightIcon","bottom_leftIcon","curvedAngle_lessIcon","curvedAngle_moreIcon","curvedRadius_lessIcon","curvedRadius_moreIcon","boldIcon","italicIcon","overlineIcon","line_throughIcon","underlineIcon","backgroundIcon","borderIcon","fontstrokeIcon","crossline2Icon","crosslineIcon","colorsPickerType","name","showAllColors","defaultSetting","watermarkText","symbol","rotateAngle","style","tileStyle","marginX","marginY","singleStyle","position","curvedStyle","curvedRadius","curvedAngle","curvedMargin","font","fontStyle","fontWeight","fontSize","color","opacity","textDecorationOver","show","lineWidth","textDecorationThrough","textDecorationUnder","fontStroke","background","border","crossLineTen","crossLineCross","useState","width","height","size","image","setImage","JSON","parse","stringify","setSetting","colorsPicker","setcolorsPicker","drawWatermark","canvas","document","getElementById","ctx","getContext","watermark","length","map","text","index","save","fillStyle","textAlign","textBaseline","translate","Math","round","rotate","PI","sqrt","textWidthMax","max","measureText","forEach","yStart","textWidthCurrent","x","y","fillRect","restore","strokeStyle","strokeText","strokeRect","beginPath","moveTo","lineTo","stroke","fillText","cornerPoints","push","borderLineWidth","topLineWidth","bottomLineWidth","centerX","centerY","drawTextAlongArc","type","radius","angle","n","char","arc","debounceInput","useCallback","debounce","e","input","target","settingTemp","split","debounceChangeSlider","names","replace","onChangeSlider","Number","onChangeColor","dataset","colorsPickerTemp","entries","onShowMoreColors","i","onClickSettingIcon","currentTarget","settingName","onKeyEnterSetting","key","onKeyEnterColor","onKeyEnterShowMoreColor","useEffect","img","Image","src","url","onload","drawImage","content","css","href","id","className","display","htmlFor","multiple","accept","onChange","file","files","imageUrl","URL","createObjectURL","fileSize","sizeMB","toFixed","sizeKB","dpr","window","devicePixelRatio","canvasContainer","getBoundingClientRect","zoomNumWidth","zoomNumHeight","minHeight","minWidth","onClick","download","role","a","preventDefault","outputImage","toDataURL","onInput","persist","placeholder","rows","min","defaultValue","item","onKeyDown","tabindex","data-setting","data-value","icons","indexOf","alt","includes","pickerType","step","backgroundColor","transparentIcon","title","slug"],"mappings":"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","file":"efff2b31-88dd0bc0a173fd1c7b92.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\"\nimport Layout from \"../component/layout\"\nimport { css } from \"@emotion/core\"\nimport Helmet from \"react-helmet\"\nimport ISSO from \"../component/comment\"\nimport debounce from 'lodash.debounce'\n\nimport backgroundIcon from \"../image/watermark/background.png\"\nimport boldIcon from \"../image/watermark/bold.png\"\nimport borderIcon from \"../image/watermark/border.png\"\nimport bottom_leftIcon from \"../image/watermark/bottom_left.png\"\nimport bottom_rightIcon from \"../image/watermark/bottom_right.png\"\nimport centerIcon from \"../image/watermark/center.png\"\nimport crosslineIcon from \"../image/watermark/crossline.png\"\nimport crossline2Icon from \"../image/watermark/crossline2.png\"\nimport curvedAngle_lessIcon from \"../image/watermark/curvedAngle_less.png\"\nimport curvedAngle_moreIcon from \"../image/watermark/curvedAngle_more.png\"\nimport curvedRadius_lessIcon from \"../image/watermark/curvedRadius_less.png\"\nimport curvedRadius_moreIcon from \"../image/watermark/curvedRadius_more.png\"\nimport fontstrokeIcon from \"../image/watermark/fontstroke.png\"\nimport italicIcon from \"../image/watermark/italic.png\"\nimport line_throughIcon from \"../image/watermark/line_through.png\"\nimport marginX_lessIcon from \"../image/watermark/marginX_less.png\"\nimport marginX_moreIcon from \"../image/watermark/marginX_more.png\"\nimport marginY_lessIcon from \"../image/watermark/marginY_less.png\"\nimport marginY_moreIcon from \"../image/watermark/marginY_more.png\"\nimport overlineIcon from \"../image/watermark/overline.png\"\nimport rotateRightIcon from \"../image/watermark/rotate_right.png\"\nimport rotateLeftIcon from \"../image/watermark/rotate_left.png\"\nimport top_leftIcon from \"../image/watermark/top_left.png\"\nimport top_rightIcon from \"../image/watermark/top_right.png\"\nimport transparentIcon from \"../image/watermark/transparent.png\"\nimport underlineIcon from \"../image/watermark/underline.png\"\n\nconst allColors = [\"transparent\", \"rgba(210,77,87,1)\", \"rgba(242,38,19,1)\", \"rgba(217,30,24,1)\", \"rgba(150,40,27,1)\", \"rgba(239,72,54,1)\", \"rgba(214,69,65,1)\", \"rgba(192,57,43,1)\", \"rgba(207,0,15,1)\", \"rgba(231,76,60,1)\", \"rgba(219,10,91,1)\", \"rgba(246,71,71,1)\", \"rgba(241,169,160,1)\", \"rgba(210,82,127,1)\", \"rgba(224,130,131,1)\", \"rgba(246,36,89,1)\", \"rgba(226,106,106,1)\", \"rgba(220,198,224,1)\", \"rgba(102,51,153,1)\", \"rgba(103,65,114,1)\", \"rgba(174,168,211,1)\", \"rgba(145,61,136,1)\", \"rgba(154,18,179,1)\", \"rgba(191,85,236,1)\", \"rgba(190,144,212,1)\", \"rgba(142,68,173,1)\", \"rgba(155,89,182,1)\", \"rgba(68,108,179,1)\", \"rgba(228,241,254,1)\", \"rgba(65,131,215,1)\", \"rgba(89,171,227,1)\", \"rgba(129,207,224,1)\", \"rgba(82,179,217,1)\", \"rgba(197,239,247,1)\", \"rgba(34,167,240,1)\", \"rgba(52,152,219,1)\", \"rgba(44,62,80,1)\", \"rgba(25,181,254,1)\", \"rgba(51,110,123,1)\", \"rgba(34,49,63,1)\", \"rgba(107,185,240,1)\", \"rgba(30,139,195,1)\", \"rgba(58,83,155,1)\", \"rgba(52,73,94,1)\", \"rgba(103,128,159,1)\", \"rgba(37,116,169,1)\", \"rgba(31,58,147,1)\", \"rgba(137,196,244,1)\", \"rgba(75,119,190,1)\", \"rgba(92,151,191,1)\", \"rgba(78,205,196,1)\", \"rgba(162,222,208,1)\", \"rgba(135,211,124,1)\", \"rgba(144,198,149,1)\", \"rgba(38,166,91,1)\", \"rgba(3,201,169,1)\", \"rgba(104,195,163,1)\", \"rgba(101,198,187,1)\", \"rgba(27,188,155,1)\", \"rgba(27,163,156,1)\", \"rgba(102,204,153,1)\", \"rgba(54,215,183,1)\", \"rgba(200,247,197,1)\", \"rgba(134,226,213,1)\", \"rgba(46,204,113,1)\", \"rgba(22,160,133,1)\", \"rgba(63,195,128,1)\", \"rgba(1,152,117,1)\", \"rgba(3,166,120,1)\", \"rgba(77,175,124,1)\", \"rgba(42,187,155,1)\", \"rgba(0,177,106,1)\", \"rgba(30,130,76,1)\", \"rgba(4,147,114,1)\", \"rgba(38,194,129,1)\", \"rgba(253,227,167,1)\", \"rgba(248,148,6,1)\", \"rgba(235,149,50,1)\", \"rgba(232,126,4,1)\", \"rgba(244,179,80,1)\", \"rgba(242,120,75,1)\", \"rgba(235,151,78,1)\", \"rgba(245,171,53,1)\", \"rgba(211,84,0,1)\", \"rgba(243,156,18,1)\", \"rgba(249,105,14,1)\", \"rgba(249,191,59,1)\", \"rgba(242,121,53,1)\", \"rgba(230,126,34,1)\", \"rgba(236,236,236,1)\", \"rgba(108,122,137,1)\", \"rgba(210,215,211,1)\", \"rgba(238,238,238,1)\", \"rgba(189,195,199,1)\", \"rgba(236,240,241,1)\", \"rgba(149,165,166,1)\", \"rgba(218,223,225,1)\", \"rgba(171,183,183,1)\", \"rgba(242,241,239,1)\", \"rgba(191,191,191,1)\", \"rgba(230,226,175,1)\", \"rgba(167,163,126,1)\", \"rgba(239,236,202,1)\", \"rgba(4,99,128,1)\", \"rgba(0,47,47,1)\", \"rgba(70,137,102,1)\", \"rgba(255,240,165,1)\", \"rgba(255,176,59,1)\", \"rgba(182,73,38,1)\", \"rgba(142,40,0,1)\", \"rgba(30,30,32,1)\"];\n\nconst someColors = [\"rgba(189,195,199,1)\", \"rgba(255,176,59,1)\", \"rgba(191,85,236,1)\", \"rgba(242,38,19,1)\", \"rgba(0,0,0,1)\"]\n\nconst hStyle = css`\n  font-size: clamp(1.3rem, 1vw + 1.3rem, 1.8rem);\n  text-align: center;\n  margin: 1em 0;\n`\n\nconst miniprogramLink = css`\n    font-weight: bold;\n    color: black;\n    text-decoration: underline;\n    :hover {\n        text-decoration: none;\n    }\n`\n\nconst canvasSectionStyle = css`\n  #canvasContainer {\n    width: 100%;\n    max-height: 500px;\n    overflow: scroll;\n    display: grid;\n    place-items: center;\n    margin-top: 50px;\n    canvas {\n      box-shadow: 0 0 3px grey;\n    }\n    .scroll-div {\n        overflow: scroll;\n        max-height: 500px;\n        max-width: 100%;\n      ::-webkit-scrollbar {\n          -webkit-appearance: none;\n      }\n      ::-webkit-scrollbar:horizontal {\n          height: 11px;\n      }\n      ::-webkit-scrollbar:vertical {\n          width: 11px;\n      }\n      ::-webkit-scrollbar-thumb {\n          border-radius: 8px;\n          border: 2px solid white; /* should match background, can't be transparent */\n          background-color: rgba(0, 0, 0, .5);\n      }\n    }\n  }\n  .image-info {\n    font-size: 0.8rem;\n    text-align: center;\n    margin: 0 auto 1em auto;\n}\n`\n\nconst controlSectionStyle = css`\n  display: grid;\n  grid-template-columns: 100%;\n  grid-gap: 15px;\n`\n\nconst buttonsStyle = css`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  margin: 30px 0;\n  place-items: center;\n  font-weight: bold;\n  .chooseImageBtn {\n      label input {\n          width: 0;\n          height: 0;\n          opacity: 0;\n          position: absolute;\n      }\n      label span {\n          cursor: pointer;\n      }\n  }\n  .saveImageBtn a {\n      text-decoration: none;\n      color: black;\n  }\n  .button {\n        font-size: 1.3rem;\n        background-color: lightcyan;\n        padding: 0.2em 0.4em;\n        border: 1px solid grey;\n        border-radius: 0.2em;\n        box-shadow: 0 0 3px grey;\n        transition: 220ms all ease-in-out;\n        :hover {\n            background-color: wheat;\n          }\n        input: focus + span {\n            border: 2px solid black;\n            border-radius: 0.2em;\n        }\n  }\n`\n\nconst watermarkInputStyle = css`\n  display: flex;\n  p {\n    font-size: 1.2rem;\n    margin: 0.5em 0.5em 0.5em 0;\n    flex-shrink: 0;\n  }\n  textarea {\n    font-size: 1.2rem;\n    flex: 1;\n    max-width: 50%;\n    padding: 0 0.4em;\n    margin: auto 0;\n    height: 3em;\n    line-height: 1.5;\n    vertical-align: middle;\n  }\n`\n\nconst watermarkSizeStyle = css`\n    display: flex;\n    p {\n        font-size: 1.2rem;\n        margin: 0.5em 0.5em 0.5em 0;\n        flex-shrink: 0;\n    }\n    input {\n        flex: 1;\n        max-width: 50%;\n    }\n`\nconst settingTextContainer = css`\n  display: flex;\n`\n\nconst settingIconStyle = css`\n    font-size: 1.2rem;\n    line-height: 1.1em;\n    width: 1.6em;\n    height: 1.6em;\n    border-radius: 10%;\n    font-weight: bold;\n    box-shadow: 0 0 3px grey;\n    margin: 0.2em;\n    padding: 0.25em;\n    text-align: center;\n    vertical-align: middle;\n    cursor: pointer;\n    :active {\n        background-color: wheat;\n    } \n`\n\nconst settingIconChosenStyle = css`\n    font-size: 1.2rem;\n    line-height: 1.1em;\n    width: 1.6em;\n    height: 1.6em;\n    border-radius: 10%;\n    font-weight: bold;\n    box-shadow: 0 0 3px grey;\n    margin: 0.2em;\n    padding: 0.25em;\n    text-align: center;\n    vertical-align: middle;\n    cursor: pointer;\n    background-color: wheat;\n`\n\nconst allColorPickerContainer = css`\n    display: grid;\n    grid-template-columns: 100%;\n    grid-gap: 1em;\n    p {\n        font-size: 1.2rem;\n        margin: 0.2em 0;\n    }\n    .opacityAndLineWidth {\n        margin: 0.8em 0;\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n        div {\n            margin-right: 20px;\n            display: flex;\n            p {\n                flex-shrink: 0;\n            }\n            input {\n                flex: 1;\n            }\n        }\n    }\n    .color-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, 1.5rem);\n        grid-gap: 1px;\n        .one-color {\n            height: 1.5rem;\n            width: 1.5rem;\n            color: white;\n            text-align: center;\n            text-shadow: #000 1px 0 3px;\n        }\n        .more-color {\n            grid-column-end: span 3;\n            height: 1.5rem;\n            line-height: 1.5em;\n            vertical-align: middle;\n            text-align: center;\n            background-color: wheat;\n        }\n    }\n`\n\nconst settingIcons = [\n    [\n        { setting: \"rotateAngle\", icon: rotateRightIcon, value: \"rotateRight\", belongTo: \"all\" },\n        { setting: \"rotateAngle\", icon: rotateLeftIcon, value: \"rotateLeft\", belongTo: \"all\" }\n    ],\n    [\n        { setting: \"tileStyle.marginX\", icon: marginX_lessIcon, value: \"marginX_less\", belongTo: \"tile\" },\n        { setting: \"tileStyle.marginX\", icon: marginX_moreIcon, value: \"marginX_more\", belongTo: \"tile\" },\n        { setting: \"tileStyle.marginY\", icon: marginY_lessIcon, value: \"marginY_less\", belongTo: \"tile\" },\n        { setting: \"tileStyle.marginY\", icon: marginY_moreIcon, value: \"marginY_more\", belongTo: \"tile\" }\n    ],\n    [\n        { setting: \"singleStyle.position\", icon: top_leftIcon, value: \"top_left\", belongTo: \"single\" },\n        { setting: \"singleStyle.position\", icon: top_rightIcon, value: \"top_right\", belongTo: \"single\" },\n        { setting: \"singleStyle.position\", icon: centerIcon, value: \"center\", belongTo: \"single\" },\n        { setting: \"singleStyle.position\", icon: bottom_rightIcon, value: \"bottom_right\", belongTo: \"single\" },\n        { setting: \"singleStyle.position\", icon: bottom_leftIcon, value: \"bottom_left\", belongTo: \"single\" }\n    ],\n    [\n        { setting: \"curvedStyle.curvedMargin\", icon: marginY_lessIcon, value: \"curvedMargin_less\", belongTo: \"curved\" },\n        { setting: \"curvedStyle.curvedMargin\", icon: marginY_moreIcon, value: \"curvedMargin_more\", belongTo: \"curved\" },\n        { setting: \"curvedStyle.curvedAngle\", icon: curvedAngle_lessIcon, value: \"curvedAngle_less\", belongTo: \"curved\" },\n        { setting: \"curvedStyle.curvedAngle\", icon: curvedAngle_moreIcon, value: \"curvedAngle_more\", belongTo: \"curved\" },\n        { setting: \"curvedStyle.curvedRadius\", icon: curvedRadius_lessIcon, value: \"curvedRadius_less\", belongTo: \"curved\" },\n        { setting: \"curvedStyle.curvedRadius\", icon: curvedRadius_moreIcon, value: \"curvedRadius_more\", belongTo: \"curved\" }\n    ],\n    [\n        { setting: \"font.fontWeight\", icon: boldIcon, value: \"fontWeight\", belongTo: \"all\" },\n        { setting: \"font.fontStyle\", icon: italicIcon, value: \"fontStyle\", belongTo: \"all\" },\n        { setting: \"textDecorationOver.show\", icon: overlineIcon, value: \"overline\", belongTo: \"all\" },\n        { setting: \"textDecorationThrough.show\", icon: line_throughIcon, value: \"line_through\", belongTo: \"all\" },\n        { setting: \"textDecorationUnder.show\", icon: underlineIcon, value: \"underline\", belongTo: \"all\" }\n    ],\n    [\n        { setting: \"background.show\", icon: backgroundIcon, value: \"background\", belongTo: \"tile_single\" },\n        { setting: \"border.show\", icon: borderIcon, value: \"border\", belongTo: \"tile_single\" },\n        { setting: \"fontStroke.show\", icon: fontstrokeIcon, value: \"fontStroke\", belongTo: \"all\" },\n        { setting: \"crossLineTen.show\", icon: crossline2Icon, value: \"crossLineTen\", belongTo: \"all\" },\n        { setting: \"crossLineCross.show\", icon: crosslineIcon, value: \"crossLineCross\", belongTo: \"all\" },\n    ],\n]\n\nconst colorsPickerType = [\n    { setting: 'font', name: '水印颜色', showAllColors: false },\n    { setting: 'textDecorationOver', name: '上横线', showAllColors: false },\n    { setting: 'textDecorationThrough', name: '中横线', showAllColors: false },\n    { setting: 'textDecorationUnder', name: '下横线', showAllColors: false },\n    { setting: 'background', name: '背景', showAllColors: false },\n    { setting: 'border', name: '边框', showAllColors: false },\n    { setting: 'fontStroke', name: '描边', showAllColors: false },\n    { setting: 'crossLineTen', name: '十字线', showAllColors: false },\n    { setting: 'crossLineCross', name: '交叉线', showAllColors: false }\n]\n\nconst defaultSetting = {\n    watermarkText: [],\n    symbol: '',\n    rotateAngle: 45,\n    style: 'tile',\n    tileStyle: {\n        marginX: 0,\n        marginY: 0,\n    },\n    singleStyle: {\n        position: 'center',\n    },\n    curvedStyle: {\n        curvedRadius: 200,\n        curvedAngle: 180,\n        curvedMargin: 0,\n    },\n    font: {\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        fontSize: 100,\n        color: 'rgba(242,38,19,0.6)',\n        opacity: 0.6,\n    },\n    textDecorationOver: {\n        show: false,\n        lineWidth: 3,\n        color: 'rgba(34,167,240,0.5)',\n        opacity: 0.5,\n    },\n    textDecorationThrough: {\n        show: false,\n        lineWidth: 3,\n        color: 'rgba(34,167,240,0.5)',\n        opacity: 0.5,\n    },\n    textDecorationUnder: {\n        show: false,\n        lineWidth: 3,\n        color: 'rgba(34,167,240,0.5)',\n        opacity: 0.5,\n    },\n    fontStroke: {\n        show: false,\n        lineWidth: 3,\n        color: 'rgba(0,0,0,0.5)',\n        opacity: 0.5,\n    },\n    background: {\n        show: false,\n        color: 'rgba(255,176,59,0.2)',\n        opacity: 0.2,\n    },\n    border: {\n        show: false,\n        lineWidth: 3,\n        color: 'rgba(191,85,236,0.5)',\n        opacity: 0.5,\n    },\n    crossLineTen: {\n        show: false,\n        lineWidth: 5,\n        color: 'rgba(242,38,19,0.5)',\n        opacity: 0.5,\n    },\n    crossLineCross: {\n        show: false,\n        lineWidth: 5,\n        color: 'rgba(242,38,19,0.5)',\n        opacity: 0.5,\n    },\n\n}\n\nexport default () => {\n    const [image, setImage] = useState({ width: 0, height: 0, size: 0 });\n    const [setting, setSetting] = useState(JSON.parse(JSON.stringify(defaultSetting)));\n    const [colorsPicker, setcolorsPicker] = useState(JSON.parse(JSON.stringify(colorsPickerType)))\n    const drawWatermark = function () {\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        var watermark = setting.watermarkText.length ? setting.watermarkText : ['办理xx专用,它用无效'];\n        watermark = watermark.map((text, index) => {\n            if (index === 0) {\n                return setting.symbol + text\n            } else {\n                return text;\n            }\n        });\n        const fontSize = setting.font.fontSize || 1;\n        ctx.font = `${setting.font.fontStyle} ${setting.font.fontWeight} ${setting.font.fontSize}px sans-serif`;\n        if (setting.style === 'tile') {\n            const marginX = setting.tileStyle.marginX;\n            const marginY = setting.tileStyle.marginY;\n            ctx.save();\n            ctx.fillStyle = setting.font.color;\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.translate(Math.round(canvas.width / 2), Math.round(canvas.height / 2));\n            ctx.rotate(setting.rotateAngle * Math.PI / 180);\n            const length = Math.sqrt(canvas.width / 2 * canvas.width / 2 + canvas.height / 2 * canvas.height / 2);\n            const textWidthMax = Math.max(...watermark.map(text => ctx.measureText(text).width));\n            watermark.forEach((text, index) => {\n                const yStart = 0 - fontSize / 2 * (watermark.length - 1) + fontSize * index;\n                const textWidthCurrent = ctx.measureText(text).width > length * 2 ? length * 2 : ctx.measureText(text).width;\n                for (let x = 0; x < length; x = x + textWidthMax * 1 + fontSize * 2 + marginX) {\n                    for (let y = yStart; y < length; y = y + fontSize * (2 + watermark.length) + marginY) {\n                        //先画背景再画文字, 避免被覆盖\n                        if (setting.background.show) {\n                            ctx.save();\n                            ctx.fillStyle = setting.background.color;\n                            if (x === 0 && y === yStart) {\n                                ctx.fillRect(x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize);\n                            } else if (x === 0 && y !== yStart) {\n                                ctx.fillRect(x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize);\n                                ctx.fillRect(x - textWidthCurrent / 2, - y - fontSize / 2, textWidthCurrent, fontSize);\n                            } else if (x !== 0 && y === yStart) {\n                                ctx.fillRect(x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize);\n                                ctx.fillRect(- x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize);\n                            } else {\n                                ctx.fillRect(x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize);\n                                ctx.fillRect(- x - textWidthCurrent / 2, - y - fontSize / 2, textWidthCurrent, fontSize);\n                                ctx.fillRect(- x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize);\n                                ctx.fillRect(x - textWidthCurrent / 2, - y - fontSize / 2, textWidthCurrent, fontSize);\n                            };\n                            ctx.restore();\n                        };\n                        if (setting.fontStroke.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.fontStroke.color;\n                            ctx.lineWidth = setting.fontStroke.lineWidth;\n                            if (x === 0 && y === yStart) {\n                                ctx.strokeText(text, x, y, length * 2);\n                            } else if (x === 0 && y !== yStart) {\n                                ctx.strokeText(text, x, y, length * 2);\n                                ctx.strokeText(text, x, -y, length * 2);\n                            } else if (x !== 0 && y === yStart) {\n                                ctx.strokeText(text, x, y, length * 2);\n                                ctx.strokeText(text, -x, y, length * 2);\n                            } else {\n                                ctx.strokeText(text, x, y, length * 2);\n                                ctx.strokeText(text, -x, y, length * 2);\n                                ctx.strokeText(text, x, -y, length * 2);\n                                ctx.strokeText(text, -x, -y, length * 2);\n                            };\n                            ctx.restore();\n                        };\n                        if (setting.border.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.border.color;\n                            ctx.lineWidth = setting.border.lineWidth;\n                            if (x === 0 && y === yStart) {\n                                ctx.strokeRect(x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize)\n                            } else if (x === 0 && y !== yStart) {\n                                ctx.strokeRect(x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize)\n                                ctx.strokeRect(x - textWidthCurrent / 2, -y - fontSize / 2, textWidthCurrent, fontSize)\n                            } else if (x !== 0 && y === yStart) {\n                                ctx.strokeRect(x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize)\n                                ctx.strokeRect(-x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize)\n                            } else {\n                                ctx.strokeRect(x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize)\n                                ctx.strokeRect(x - textWidthCurrent / 2, -y - fontSize / 2, textWidthCurrent, fontSize)\n                                ctx.strokeRect(-x - textWidthCurrent / 2, y - fontSize / 2, textWidthCurrent, fontSize)\n                                ctx.strokeRect(-x - textWidthCurrent / 2, -y - fontSize / 2, textWidthCurrent, fontSize)\n                            };\n\n                            ctx.restore();\n                        }\n                        if (setting.textDecorationOver.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.textDecorationOver.color;\n                            ctx.lineWidth = setting.textDecorationOver.lineWidth;\n                            ctx.beginPath();\n                            if (x === 0 && y === yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, y - fontSize / 2);\n                            } else if (x === 0 && y !== yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.moveTo(x - textWidthCurrent / 2, -y - fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, -y - fontSize / 2);\n                            } else if (x !== 0 && y === yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.moveTo(-x - textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.lineTo(-x + textWidthCurrent / 2, y - fontSize / 2);\n                            } else {\n                                ctx.moveTo(x - textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.moveTo(-x - textWidthCurrent / 2, -y - fontSize / 2);\n                                ctx.lineTo(-x + textWidthCurrent / 2, -y - fontSize / 2);\n                                ctx.moveTo(x - textWidthCurrent / 2, -y - fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, -y - fontSize / 2);\n                                ctx.moveTo(-x - textWidthCurrent / 2, y - fontSize / 2);\n                                ctx.lineTo(-x + textWidthCurrent / 2, y - fontSize / 2);\n                            };\n\n                            ctx.stroke();\n                            ctx.restore();\n                        };\n                        if (setting.textDecorationThrough.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.textDecorationThrough.color;\n                            ctx.lineWidth = setting.textDecorationThrough.lineWidth;\n                            ctx.beginPath();\n                            if (x === 0 && y === yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y);\n                                ctx.lineTo(x + textWidthCurrent / 2, y);\n                            } else if (x === 0 && y !== yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y);\n                                ctx.lineTo(x + textWidthCurrent / 2, y);\n                                ctx.moveTo(x - textWidthCurrent / 2, -y);\n                                ctx.lineTo(x + textWidthCurrent / 2, -y);\n                            } else if (x !== 0 && y === yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y);\n                                ctx.lineTo(x + textWidthCurrent / 2, y);\n                                ctx.moveTo(-x - textWidthCurrent / 2, y);\n                                ctx.lineTo(-x + textWidthCurrent / 2, y);\n                            } else {\n                                ctx.moveTo(x - textWidthCurrent / 2, y);\n                                ctx.lineTo(x + textWidthCurrent / 2, y);\n                                ctx.moveTo(x - textWidthCurrent / 2, -y);\n                                ctx.lineTo(x + textWidthCurrent / 2, -y);\n                                ctx.moveTo(-x - textWidthCurrent / 2, y);\n                                ctx.lineTo(-x + textWidthCurrent / 2, y);\n                                ctx.moveTo(-x - textWidthCurrent / 2, -y);\n                                ctx.lineTo(-x + textWidthCurrent / 2, -y);\n                            };\n                            ctx.stroke();\n                            ctx.restore();\n                        };\n                        if (setting.textDecorationUnder.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.textDecorationUnder.color;\n                            ctx.lineWidth = setting.textDecorationUnder.lineWidth;\n                            ctx.beginPath();\n                            if (x === 0 && y === yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, y + fontSize / 2);\n                            } else if (x === 0 && y !== yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.moveTo(x - textWidthCurrent / 2, -y + fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, -y + fontSize / 2);\n                            } else if (x !== 0 && y === yStart) {\n                                ctx.moveTo(x - textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.moveTo(-x - textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.lineTo(-x + textWidthCurrent / 2, y + fontSize / 2);\n                            } else {\n                                ctx.moveTo(x - textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.moveTo(-x - textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.lineTo(-x + textWidthCurrent / 2, y + fontSize / 2);\n                                ctx.moveTo(x - textWidthCurrent / 2, -y + fontSize / 2);\n                                ctx.lineTo(x + textWidthCurrent / 2, -y + fontSize / 2);\n                                ctx.moveTo(-x - textWidthCurrent / 2, -y + fontSize / 2);\n                                ctx.lineTo(-x + textWidthCurrent / 2, -y + fontSize / 2);\n                            };\n                            ctx.stroke();\n                            ctx.restore();\n                        };\n                        if (x === 0 && y === yStart) {\n                            ctx.fillText(text, x, y, length * 2);\n                        } else if (x === 0 && y !== yStart) {\n                            ctx.fillText(text, x, y, length * 2);\n                            ctx.fillText(text, x, -y, length * 2);\n                        } else if (x !== 0 && y === yStart) {\n                            ctx.fillText(text, x, y, length * 2);\n                            ctx.fillText(text, -x, y, length * 2);\n                        } else {\n                            ctx.fillText(text, x, y, length * 2);\n                            ctx.fillText(text, -x, y, length * 2);\n                            ctx.fillText(text, x, -y, length * 2);\n                            ctx.fillText(text, -x, -y, length * 2);\n                        };\n                    }\n                }\n            });\n            ctx.restore();\n        } else if (setting.style === 'single') {\n            ctx.save();\n            ctx.fillStyle = setting.font.color;\n            const length = Math.sqrt(canvas.width / 2 * canvas.width / 2 + canvas.height / 2 * canvas.height / 2);\n            watermark.forEach((text, index) => {\n                const textWidthCurrent = ctx.measureText(text).width > length * 2 ? length * 2 : ctx.measureText(text).width;\n                const cornerPoints = [];\n                switch (setting.singleStyle.position) {\n                    case 'center': {\n                        ctx.save()\n                        ctx.translate(Math.round(canvas.width / 2), Math.round(canvas.height / 2));\n                        ctx.rotate(setting.rotateAngle * Math.PI / 180);\n                        ctx.textAlign = 'center';\n                        ctx.textBaseline = 'middle';\n                        const x = 0;\n                        const y = 0 - fontSize / 2 * (watermark.length - 1) + fontSize * index;\n                        cornerPoints.push(\n                            [x - textWidthCurrent / 2, y - fontSize / 2],\n                            [x + textWidthCurrent / 2, y - fontSize / 2],\n                            [x - textWidthCurrent / 2, y + fontSize / 2],\n                            [x + textWidthCurrent / 2, y + fontSize / 2]\n                        );\n                        if (setting.background.show) {\n                            ctx.save()\n                            ctx.fillStyle = setting.background.color;\n                            ctx.fillRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        if (setting.fontStroke.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.fontStroke.color;\n                            ctx.lineWidth = setting.fontStroke.lineWidth;\n                            ctx.strokeText(text, x, y, textWidthCurrent)\n                            ctx.restore();\n                        }\n                        if (setting.textDecorationOver.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationOver.color;\n                            ctx.lineWidth = setting.textDecorationOver.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1])\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationThrough.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationThrough.color;\n                            ctx.lineWidth = setting.textDecorationThrough.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1] + fontSize / 2)\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1] + fontSize / 2)\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationUnder.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationUnder.color;\n                            ctx.lineWidth = setting.textDecorationUnder.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[3][0], cornerPoints[3][1])\n                            ctx.lineTo(cornerPoints[2][0], cornerPoints[2][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.border.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.border.color;\n                            ctx.lineWidth = setting.border.lineWidth;\n                            ctx.strokeRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        ctx.fillText(text, x, y, textWidthCurrent);\n                        ctx.restore()\n                        break;\n                    }\n                    case 'top_left': {\n                        ctx.save()\n                        ctx.textAlign = 'left';\n                        ctx.textBaseline = 'top';\n                        const borderLineWidth = setting.border.show ? setting.border.lineWidth / 2 : 0;\n                        const topLineWidth = setting.textDecorationOver.show ? setting.textDecorationOver.lineWidth / 2 : 0;\n                        const x = 0 + borderLineWidth;\n                        const y = 0 + fontSize * index + Math.max(borderLineWidth, topLineWidth);\n                        cornerPoints.push(\n                            [0 + borderLineWidth, fontSize * index + Math.max(borderLineWidth, topLineWidth)],\n                            [textWidthCurrent + borderLineWidth, fontSize * index + Math.max(borderLineWidth, topLineWidth)],\n                            [textWidthCurrent + borderLineWidth, fontSize * (index + 1) + Math.max(borderLineWidth, topLineWidth)],\n                            [0 + borderLineWidth, fontSize * (index + 1) + Math.max(borderLineWidth, topLineWidth)]\n                        )\n                        if (setting.background.show) {\n                            ctx.save()\n                            ctx.fillStyle = setting.background.color;\n                            ctx.fillRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        if (setting.fontStroke.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.fontStroke.color;\n                            ctx.lineWidth = setting.fontStroke.lineWidth;\n                            ctx.strokeText(text, x, y, textWidthCurrent)\n                            ctx.restore();\n                        }\n                        if (setting.textDecorationOver.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationOver.color;\n                            ctx.lineWidth = setting.textDecorationOver.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1])\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationThrough.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationThrough.color;\n                            ctx.lineWidth = setting.textDecorationThrough.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1] + fontSize / 2)\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1] + fontSize / 2)\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationUnder.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationUnder.color;\n                            ctx.lineWidth = setting.textDecorationUnder.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[3][0], cornerPoints[3][1])\n                            ctx.lineTo(cornerPoints[2][0], cornerPoints[2][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.border.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.border.color;\n                            ctx.lineWidth = setting.border.lineWidth;\n                            ctx.strokeRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        ctx.fillText(text, x, y, textWidthCurrent);\n                        ctx.restore()\n                        break;\n                    }\n                    case 'top_right': {\n                        ctx.save()\n                        ctx.translate(canvas.width, 0);\n                        ctx.textAlign = 'left';\n                        ctx.textBaseline = 'top';\n                        const borderLineWidth = setting.border.show ? setting.border.lineWidth / 2 : 0;\n                        const topLineWidth = setting.textDecorationOver.show ? setting.textDecorationOver.lineWidth / 2 : 0;\n                        const x = -textWidthCurrent - borderLineWidth;\n                        const y = 0 + fontSize * index + Math.max(borderLineWidth, topLineWidth);\n                        cornerPoints.push(\n                            [-textWidthCurrent - borderLineWidth, fontSize * index + Math.max(borderLineWidth, topLineWidth)],\n                            [0 - borderLineWidth, fontSize * index + Math.max(borderLineWidth, topLineWidth)],\n                            [0 - borderLineWidth, fontSize * (index + 1) + Math.max(borderLineWidth, topLineWidth)],\n                            [-textWidthCurrent - borderLineWidth, fontSize * (index + 1) + Math.max(borderLineWidth, topLineWidth)]\n                        )\n                        if (setting.background.show) {\n                            ctx.save()\n                            ctx.fillStyle = setting.background.color;\n                            ctx.fillRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        if (setting.fontStroke.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.fontStroke.color;\n                            ctx.lineWidth = setting.fontStroke.lineWidth;\n                            ctx.strokeText(text, x, y, textWidthCurrent)\n                            ctx.restore();\n                        }\n                        if (setting.textDecorationOver.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationOver.color;\n                            ctx.lineWidth = setting.textDecorationOver.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1])\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationThrough.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationThrough.color;\n                            ctx.lineWidth = setting.textDecorationThrough.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1] + fontSize / 2)\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1] + fontSize / 2)\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationUnder.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationUnder.color;\n                            ctx.lineWidth = setting.textDecorationUnder.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[3][0], cornerPoints[3][1])\n                            ctx.lineTo(cornerPoints[2][0], cornerPoints[2][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.border.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.border.color;\n                            ctx.lineWidth = setting.border.lineWidth;\n                            ctx.strokeRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        ctx.fillText(text, x, y, textWidthCurrent);\n                        ctx.restore()\n                        break;\n                    }\n                    case 'bottom_right': {\n                        ctx.save()\n                        ctx.translate(canvas.width, canvas.height);\n                        ctx.textAlign = 'left';\n                        ctx.textBaseline = 'top';\n                        const borderLineWidth = setting.border.show ? setting.border.lineWidth / 2 : 0;\n                        const bottomLineWidth = setting.textDecorationUnder.show ? setting.textDecorationUnder.lineWidth / 2 : 0;\n                        var x = -textWidthCurrent - borderLineWidth;\n                        var y = - fontSize * watermark.length + fontSize * index - Math.max(borderLineWidth, bottomLineWidth);\n                        cornerPoints.push(\n                            [-textWidthCurrent - borderLineWidth, - fontSize * watermark.length + fontSize * index - Math.max(borderLineWidth, bottomLineWidth)],\n                            [0 - borderLineWidth, - fontSize * watermark.length + fontSize * index - Math.max(borderLineWidth, bottomLineWidth)],\n                            [0 - borderLineWidth, - fontSize * (watermark.length - 1) + fontSize * index - Math.max(borderLineWidth, bottomLineWidth)],\n                            [-textWidthCurrent - borderLineWidth, - fontSize * (watermark.length - 1) + fontSize * index - Math.max(borderLineWidth, bottomLineWidth)]\n                        )\n                        if (setting.background.show) {\n                            ctx.save()\n                            ctx.fillStyle = setting.background.color;\n                            ctx.fillRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        if (setting.fontStroke.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.fontStroke.color;\n                            ctx.lineWidth = setting.fontStroke.lineWidth;\n                            ctx.strokeText(text, x, y, textWidthCurrent)\n                            ctx.restore();\n                        }\n                        if (setting.textDecorationOver.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationOver.color;\n                            ctx.lineWidth = setting.textDecorationOver.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1])\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationThrough.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationThrough.color;\n                            ctx.lineWidth = setting.textDecorationThrough.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1] + fontSize / 2)\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1] + fontSize / 2)\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationUnder.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationUnder.color;\n                            ctx.lineWidth = setting.textDecorationUnder.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[3][0], cornerPoints[3][1])\n                            ctx.lineTo(cornerPoints[2][0], cornerPoints[2][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.border.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.border.color;\n                            ctx.lineWidth = setting.border.lineWidth;\n                            ctx.strokeRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        ctx.fillText(text, x, y, textWidthCurrent);\n                        ctx.restore()\n                        break;\n                    }\n                    case 'bottom_left': {\n                        ctx.save()\n                        ctx.translate(0, canvas.height);\n                        ctx.textAlign = 'left';\n                        ctx.textBaseline = 'top';\n                        const borderLineWidth = setting.border.show ? setting.border.lineWidth / 2 : 0;\n                        const bottomLineWidth = setting.textDecorationUnder.show ? setting.textDecorationUnder.lineWidth / 2 : 0;\n                        const x = 0 + borderLineWidth;\n                        const y = - fontSize * watermark.length + fontSize * index - Math.max(borderLineWidth, bottomLineWidth);\n                        cornerPoints.push(\n                            [0 + borderLineWidth, - fontSize * watermark.length + fontSize * index - Math.max(borderLineWidth, bottomLineWidth)],\n                            [textWidthCurrent + borderLineWidth, - fontSize * watermark.length + fontSize * index - Math.max(borderLineWidth, bottomLineWidth)],\n                            [textWidthCurrent + borderLineWidth, - fontSize * (watermark.length - 1) + fontSize * index - Math.max(borderLineWidth, bottomLineWidth)],\n                            [0 + borderLineWidth, - fontSize * (watermark.length - 1) + fontSize * index - Math.max(borderLineWidth, bottomLineWidth)]\n                        )\n                        if (setting.background.show) {\n                            ctx.save()\n                            ctx.fillStyle = setting.background.color;\n                            ctx.fillRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        if (setting.fontStroke.show) {\n                            ctx.save();\n                            ctx.strokeStyle = setting.fontStroke.color;\n                            ctx.lineWidth = setting.fontStroke.lineWidth;\n                            ctx.strokeText(text, x, y, textWidthCurrent)\n                            ctx.restore();\n                        }\n                        if (setting.textDecorationOver.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationOver.color;\n                            ctx.lineWidth = setting.textDecorationOver.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1])\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationThrough.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationThrough.color;\n                            ctx.lineWidth = setting.textDecorationThrough.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[0][0], cornerPoints[0][1] + fontSize / 2)\n                            ctx.lineTo(cornerPoints[1][0], cornerPoints[1][1] + fontSize / 2)\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.textDecorationUnder.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.textDecorationUnder.color;\n                            ctx.lineWidth = setting.textDecorationUnder.lineWidth;\n                            ctx.beginPath()\n                            ctx.moveTo(cornerPoints[3][0], cornerPoints[3][1])\n                            ctx.lineTo(cornerPoints[2][0], cornerPoints[2][1])\n                            ctx.stroke()\n                            ctx.restore()\n                        }\n                        if (setting.border.show) {\n                            ctx.save()\n                            ctx.strokeStyle = setting.border.color;\n                            ctx.lineWidth = setting.border.lineWidth;\n                            ctx.strokeRect(cornerPoints[0][0], cornerPoints[0][1], textWidthCurrent, fontSize)\n                            ctx.restore()\n                        }\n                        ctx.fillText(text, x, y, textWidthCurrent);\n                        ctx.restore()\n                        break;\n                    }\n                    default: {\n                        break;\n                    }\n                }\n            })\n            ctx.restore();\n        } else if (setting.style === 'curved') {\n            ctx.save()\n            ctx.fillStyle = setting.font.color;\n            const curvedRadius = setting.curvedStyle.curvedRadius;\n            const curvedAngle = setting.curvedStyle.curvedAngle * Math.PI / 180;\n            const rotateAngle = setting.rotateAngle * Math.PI / 180;\n            const centerX = Math.round(canvas.width / 2);\n            const centerY = Math.round(canvas.height / 2);\n            const drawTextAlongArc = function (type, ctx, watermark, centerX, centerY, radius, angle, rotateAngle) {\n                ctx.save();\n                ctx.translate(centerX, centerY);\n                ctx.rotate(-1 * (angle - rotateAngle) / 2);\n                ctx.rotate(-1 * (angle / watermark.length));\n                for (let n = 0; n < watermark.length; n++) {\n                    ctx.rotate(angle / watermark.length);\n                    ctx.save();\n                    ctx.translate(0, -1 * radius);\n                    const char = watermark[n];\n                    if (type === 'strokeText') {\n                        ctx.strokeText(char, 0, 0);\n                    } else {\n                        ctx.fillText(char, 0, 0);\n                    }\n                    ctx.restore();\n                };\n                ctx.restore();\n            };\n            watermark.forEach((text, index) => {\n                if (setting.fontStroke.show) {\n                    ctx.save();\n                    ctx.strokeStyle = setting.fontStroke.color;\n                    ctx.lineWidth = setting.fontStroke.lineWidth;\n                    drawTextAlongArc('strokeText', ctx, text, centerX, centerY, curvedRadius - index * fontSize * 1.2, curvedAngle, rotateAngle);\n                    ctx.restore();\n                }\n                if (setting.textDecorationOver.show) {\n                    ctx.save();\n                    ctx.strokeStyle = setting.textDecorationOver.color;\n                    ctx.lineWidth = setting.textDecorationOver.lineWidth;\n                    ctx.beginPath()\n                    ctx.arc(centerX, centerY, curvedRadius + fontSize - index * fontSize * 1.2, -(Math.PI + curvedAngle - rotateAngle) / 2, (curvedAngle + rotateAngle - Math.PI) / 2);\n                    ctx.stroke()\n                    ctx.restore()\n                }\n                if (setting.textDecorationThrough.show) {\n                    ctx.save();\n                    ctx.strokeStyle = setting.textDecorationThrough.color;\n                    ctx.lineWidth = setting.textDecorationThrough.lineWidth;\n                    ctx.beginPath()\n                    ctx.arc(centerX, centerY, curvedRadius + fontSize / 2 - index * fontSize * 1.2, -(Math.PI + curvedAngle - rotateAngle) / 2, (curvedAngle + rotateAngle - Math.PI) / 2);\n                    ctx.stroke()\n                    ctx.restore()\n                }\n                if (setting.textDecorationUnder.show) {\n                    ctx.save();\n                    ctx.strokeStyle = setting.textDecorationUnder.color;\n                    ctx.lineWidth = setting.textDecorationUnder.lineWidth;\n                    ctx.beginPath()\n                    ctx.arc(centerX, centerY, curvedRadius - index * fontSize * 1.2, -(Math.PI + curvedAngle - rotateAngle) / 2, (curvedAngle + rotateAngle - Math.PI) / 2);\n                    ctx.stroke()\n                    ctx.restore()\n                }\n                drawTextAlongArc('fillText', ctx, text, centerX, centerY, curvedRadius - index * fontSize * 1.2, curvedAngle, rotateAngle);\n            });\n            ctx.restore();\n        }\n        if (setting.crossLineTen.show) {\n            ctx.save();\n            ctx.strokeStyle = setting.crossLineTen.color;\n            ctx.lineWidth = setting.crossLineTen.lineWidth;\n            ctx.beginPath();\n            ctx.moveTo(canvas.width / 2, 0);\n            ctx.lineTo(canvas.width / 2, canvas.height);\n            ctx.moveTo(0, canvas.height / 2);\n            ctx.lineTo(canvas.width, canvas.height / 2);\n            ctx.stroke();\n            ctx.restore();\n        }\n        if (setting.crossLineCross.show) {\n            ctx.save();\n            ctx.strokeStyle = setting.crossLineCross.color;\n            ctx.lineWidth = setting.crossLineCross.lineWidth;\n            ctx.beginPath();\n            ctx.moveTo(0, 0);\n            ctx.lineTo(canvas.width, canvas.height);\n            ctx.moveTo(canvas.width, 0);\n            ctx.lineTo(0, canvas.height);\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n\n    const onSelectImages = function (e) {\n        const file = e.target.files[0];\n        const imageUrl = URL.createObjectURL(file);\n        var fileSize = (() => {\n            const fileSize = file.size;\n            const sizeMB = Number((fileSize / 1024 / 1024).toFixed(2));\n            const sizeKB = Number((fileSize / 1024).toFixed(2));\n            if (sizeMB > 1) {\n                return sizeMB + 'MB';\n            } else {\n                return sizeKB + 'KB';\n            }\n        })();\n        const img = new Image();\n        img.src = imageUrl;\n        img.onload = () => {\n            const dpr = window.devicePixelRatio;\n            const image = {\n                width: img.width,\n                height: img.height,\n                url: img.src,\n                name: file.name,\n                size: fileSize,\n                type: file.type\n            };\n            setImage(image);\n            const canvas = document.getElementById('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const canvasContainer = document.getElementById('canvasContainer').getBoundingClientRect();\n            if (image.width <= canvasContainer.width * dpr && image.height <= 500 * dpr) {\n                canvas.style.width = `${Math.round(image.width / dpr)}px`;\n                canvas.style.height = `${Math.round(image.height / dpr)}px`\n            } else {\n                const minWidth = 300;\n                const minHeight = 300;\n                const zoomNumWidth = image.width / minWidth;\n                const zoomNumHeight = image.height / minHeight;\n                if (zoomNumWidth > 1 && zoomNumHeight > 1) {\n                    if (zoomNumWidth > zoomNumHeight) {\n                        canvas.style.height = `${minHeight}px`;\n                        canvas.style.width = `${Math.round(image.width / image.height * minHeight)}px`\n                    } else {\n                        canvas.style.width = `${minWidth}px`;\n                        canvas.style.height = `${Math.round(image.height / image.width * minWidth)}px`\n                    }\n                } else {\n                    canvas.style.width = `${Math.round(image.width / dpr)}px`;\n                    canvas.style.height = `${Math.round(image.height / dpr)}px`\n                }\n            }\n            ctx.drawImage(img, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n            drawWatermark();\n        }\n    };\n\n    const inputHandler = function (e) {\n        const input = e.target.value;\n        const settingTemp = JSON.parse(JSON.stringify(setting));\n        settingTemp.watermarkText = input.split(/\\n|\\r/g);\n        setSetting(settingTemp)\n    };\n\n    const debounceInput = useCallback(debounce(inputHandler, 250), [setting]);\n    const onInput = function (e) {\n        e.persist();\n        debounceInput(e);\n    };\n\n    const debounceChangeSlider = useCallback(debounce((value, name) => {\n        const names = name.split('.');\n        const settingTemp = JSON.parse(JSON.stringify(setting));\n        if (names.length === 2) {\n            settingTemp[names[0]][names[1]] = value;\n            if (names[1] === 'opacity') {\n                settingTemp[names[0]]['color'] = settingTemp[names[0]]['color'].replace(/[^,]+(?=\\))/g, value);\n            }\n        } else if (names.length === 3) {\n            settingTemp[names[0]][names[1]][names[2]] = value;\n        }\n        setSetting(settingTemp)\n    }, 250), [setting]);\n\n    const onChangeSlider = function (e) {\n        const value = e.target.value;\n        const name = e.target.name;\n        debounceChangeSlider(Number(value), name)\n    }\n\n    const onChangeColor = function (e) {\n        const value = e.target.dataset.value;\n        const name = e.target.dataset.setting;\n        const settingTemp = JSON.parse(JSON.stringify(setting));\n        const color = value.replace(/[^,]+(?=\\))/g, settingTemp[name]['opacity']);\n        settingTemp[name]['color'] = color;\n        setSetting(settingTemp);\n        const colorsPickerTemp = JSON.parse(JSON.stringify(colorsPicker));\n        for (let [index, i] of colorsPicker.entries()) {\n            if (name !== i.setting) {\n                colorsPickerTemp[index]['showAllColors'] = false\n            }\n        };\n        setcolorsPicker(colorsPickerTemp);\n    }\n\n    const onShowMoreColors = function (e) {\n        const name = e.target.dataset.setting;\n        const colorsPickerTemp = JSON.parse(JSON.stringify(colorsPicker));\n        for (let [index, i] of colorsPicker.entries()) {\n            if (name === i.setting) {\n                colorsPickerTemp[index]['showAllColors'] = !i.showAllColors\n            }\n        }\n        setcolorsPicker(colorsPickerTemp);\n    };\n\n    const onClickSettingIcon = function (e) {\n        const { setting: settingName, value } = e.currentTarget.dataset;\n        const settingTemp = JSON.parse(JSON.stringify(setting));\n        switch (settingName) {\n            case 'style': {\n                settingTemp[settingName] = value;\n                setSetting(settingTemp)\n                break;\n            }\n            case 'symbol': {\n                settingTemp[settingName] = (value === setting[settingName]) ? '' : value;\n                setSetting(settingTemp);\n                break;\n            }\n            case 'rotateAngle': {\n                settingTemp[settingName] = (value === 'rotateRight') ?\n                    setting[settingName] + 45 : setting[settingName] - 45;\n                setSetting(settingTemp)\n                break;\n            }\n            case 'tileStyle.marginX': {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = (value === 'marginX_more') ? setting[x][y] + 10 : setting[x][y] - 10;\n                setSetting(settingTemp)\n                break;\n            }\n            case 'tileStyle.marginY': {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = (value === 'marginY_more') ? setting[x][y] + 10 : setting[x][y] - 10;\n                setSetting(settingTemp)\n                break;\n            }\n            case 'font.fontWeight': {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = (setting[x][y] === 'normal') ? 'bold' : 'normal';\n                setSetting(settingTemp)\n                break;\n            }\n            case 'font.fontStyle': {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = (setting[x][y] === 'normal') ? 'italic' : 'normal';;\n                setSetting(settingTemp)\n                break;\n            }\n            case 'singleStyle.position': {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = value;\n                setSetting(settingTemp)\n                break;\n            }\n            case 'curvedStyle.curvedMargin': {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = (value === 'curvedMargin_more') ? setting[x][y] + 10 : setting[x][y] - 10;\n                setSetting(settingTemp)\n                break;\n            }\n            case 'curvedStyle.curvedAngle': {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = (value === 'curvedAngle_more') ? setting[x][y] + 10 : setting[x][y] - 10;\n                setSetting(settingTemp)\n                break;\n            }\n            case 'curvedStyle.curvedRadius': {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = (value === 'curvedRadius_more') ? setting[x][y] + 10 : setting[x][y] - 10;\n                setSetting(settingTemp)\n                break;\n            }\n            default: {\n                const [x, y] = settingName.split('.');\n                settingTemp[x][y] = !setting[x][y];\n                setSetting(settingTemp)\n                break;\n            }\n        }\n    };\n\n    const onKeyEnterSetting = function (e) {\n        if (e.key === 'Enter' || e.key === 'enter') {\n            onClickSettingIcon(e);\n        }\n        return;\n    };\n\n\n    const onKeyEnterColor = function (e) {\n        if (e.key === 'Enter' || e.key === 'enter') {\n            onChangeColor(e);\n        }\n        return;\n    };\n\n    const onKeyEnterShowMoreColor = function (e) {\n        if (e.key === 'Enter' || e.key === 'enter') {\n            onShowMoreColors(e);\n        }\n        return;\n    };\n\n    const saveImage = function (e) {\n        const canvas = document.getElementById('canvas');\n        const a = document.getElementById('download');\n        if (canvas.width === 0) {\n            e.preventDefault();\n        } else {\n            const outputImage = canvas.toDataURL('image/jpeg');\n            a.href = outputImage;\n        }\n    };\n\n    useEffect(() => {\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n        img.src = image.url;\n        img.onload = () => {\n            ctx.save()\n            ctx.fillStyle = '#ffffff';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(img, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n            ctx.restore();\n            drawWatermark();\n        }\n    });\n\n    return (\n        <Layout>\n            <Helmet>\n                <title>图片加水印 | 证件加水印 | 超级水印</title>\n                <meta\n                    name=\"description\"\n                    content=\"给图片加水印, 给证件加水印, 发朋友圈加水印, 支持多种水印效果, 拥有丰富的可自定义的样式, 完全离线运行, 充分保护你的隐私.\"\n                />\n            </Helmet>\n            <h1 css={hStyle}>图片加水印</h1>\n            <p>\n                给图片加水印, 给证件加水印, 发朋友圈加水印, 拥有丰富的可自定义的样式, 完全离线运行. 手机建议使用 <a href=\"weixin://dl/business/?ticket=l552632b550f18f07ee3b8103c6bf5588\" css={miniprogramLink}>微信小程序\"超级水印\"</a>, 部分浏览器点击可直接跳转到该小程序.\n            </p>\n            <section css={canvasSectionStyle}>\n                <div id=\"canvasContainer\">\n                    <div className=\"scroll-div\">\n                        <canvas id=\"canvas\" type=\"2d\" width=\"0\" height=\"0\" ></canvas>\n                    </div>\n                </div>\n                <div className=\"image-info\" style={{ display: image.width ? '' : 'none' }}>\n                    分辨率: {image.width}px * {image.height}px | 体积: {image.size}\n                </div>\n            </section>\n            <section css={controlSectionStyle}>\n                <div css={buttonsStyle}>\n                    <div className=\"chooseImageBtn button\">\n                        <label htmlFor=\"input-file\">\n                            <input\n                                id=\"input-file\"\n                                type=\"file\"\n                                multiple\n                                accept=\"image/*\"\n                                onChange={onSelectImages}\n                                onClick={e => { e.target.value = null }}>\n                            </input>\n                            <span>选择图片</span>\n                        </label>\n                    </div>\n                    <div className=\"saveImageBtn button\">\n                        <a\n                            download\n                            id=\"download\"\n                            href=\"https://kejiweixun.com/merge-images/\"\n                            role=\"button\"\n                            onClick={saveImage}>保存图片</a>\n                    </div>\n                </div>\n                <div css={watermarkInputStyle}>\n                    <p>输入水印:</p>\n                    <textarea\n                        type=\"text\"\n                        name=\"inputWatermark\"\n                        id=\"inputText\"\n                        onInput={onInput}\n                        placeholder=\"请输入水印, 可换行\"\n                        rows=\"1\"></textarea>\n                </div>\n                <div css={watermarkSizeStyle}>\n                    <p>水印大小:</p>\n                    <input\n                        type=\"range\"\n                        name=\"font.fontSize\"\n                        id=\"font.fontSize\"\n                        onChange={onChangeSlider}\n                        min=\"1\"\n                        max=\"500\"\n                        defaultValue={setting.font.fontSize}></input>\n                    <p>{setting.font.fontSize}px</p>\n                </div>\n                <div>\n                    <div css={settingTextContainer}>\n                        {\n                            [{ icon: '多', value: 'tile' }, { icon: '单', value: 'single' }, { icon: '弯', value: 'curved' }].map(item => {\n                                return (\n                                    <div\n                                        css={setting.style === item.value ? settingIconChosenStyle : settingIconStyle}\n                                        onClick={onClickSettingIcon}\n                                        onKeyDown={onKeyEnterSetting}\n                                        tabindex=\"0\"\n                                        role=\"button\"\n                                        data-setting=\"style\"\n                                        data-value={item.value} >\n                                        {item.icon}\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                    {\n                        settingIcons.map(icons => {\n                            return (\n                                <div>\n                                    {\n                                        icons.map(icon => {\n                                            if (icon.setting.indexOf('.show') !== -1) {\n                                                const [x, y] = icon.setting.split('.')\n                                                return <div\n                                                    onClick={onClickSettingIcon}\n                                                    onKeyDown={onKeyEnterSetting}\n                                                    tabindex=\"0\"\n                                                    role=\"button\"\n                                                    data-setting={icon.setting}\n                                                    data-value={icon.value}\n                                                    css={setting[x][y] === true ? settingIconChosenStyle : settingIconStyle}\n                                                    style={{ display: icon.belongTo.indexOf(setting.style) !== -1 || icon.belongTo === 'all' ? 'inline-block' : 'none' }}>\n                                                    <img\n                                                        src={icon.icon}\n                                                        style={{ width: '1.1rem', height: '1.1rem' }}\n                                                        alt={icon.setting}>\n                                                    </img>\n                                                </div>\n                                            } else if (['font.fontWeight', 'font.fontStyle'].includes(icon.setting)) {\n                                                const [x, y] = icon.setting.split('.')\n                                                return <div\n                                                    onClick={onClickSettingIcon}\n                                                    onKeyDown={onKeyEnterSetting}\n                                                    tabindex=\"0\"\n                                                    role=\"button\"\n                                                    data-setting={icon.setting}\n                                                    data-value={icon.value}\n                                                    css={setting[x][y] === 'normal' ? settingIconStyle : settingIconChosenStyle}\n                                                    style={{ display: icon.belongTo.indexOf(setting.style) !== -1 || icon.belongTo === 'all' ? 'inline-block' : 'none' }}>\n                                                    <img src={icon.icon}\n                                                        style={{ width: '1.1rem', height: '1.1rem' }}\n                                                        alt={icon.setting}>\n                                                    </img>\n                                                </div>\n                                            } else if (icon.setting === 'singleStyle.position') {\n                                                const [x, y] = icon.setting.split('.')\n                                                return <div onClick={onClickSettingIcon}\n                                                    onKeyDown={onKeyEnterSetting}\n                                                    tabindex=\"0\"\n                                                    role=\"button\"\n                                                    data-setting={icon.setting}\n                                                    data-value={icon.value}\n                                                    css={setting[x][y] === icon.value ? settingIconChosenStyle : settingIconStyle}\n                                                    style={{ display: icon.belongTo.indexOf(setting.style) !== -1 || icon.belongTo === 'all' ? 'inline-block' : 'none' }}>\n                                                    <img src={icon.icon}\n                                                        style={{ width: '1.1rem', height: '1.1rem' }}\n                                                        alt={icon.setting}>\n                                                    </img>\n                                                </div>\n                                            } else {\n                                                return <div onClick={onClickSettingIcon}\n                                                    onKeyDown={onKeyEnterSetting}\n                                                    tabindex=\"0\"\n                                                    role=\"button\"\n                                                    data-setting={icon.setting}\n                                                    data-value={icon.value}\n                                                    css={settingIconStyle}\n                                                    style={{ display: icon.belongTo.indexOf(setting.style) !== -1 || icon.belongTo === 'all' ? 'inline-block' : 'none' }}>\n                                                    <img src={icon.icon}\n                                                        style={{ width: '1.1rem', height: '1.1rem' }}\n                                                        alt={icon.setting}>\n                                                    </img>\n                                                </div>\n                                            }\n\n                                        })\n                                    }\n                                </div>\n                            )\n                        })\n                    }\n                    <div css={settingTextContainer}>\n                        {\n                            ['©', '™', '®', '℠'].map(symbol => {\n                                return (\n                                    <div css={setting.symbol === symbol ? settingIconChosenStyle : settingIconStyle}\n                                        onClick={onClickSettingIcon}\n                                        onKeyDown={onKeyEnterSetting}\n                                        tabindex=\"0\"\n                                        role=\"button\"\n                                        data-setting=\"symbol\"\n                                        data-value={symbol}>\n                                        {symbol}\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n                <div css={allColorPickerContainer}>\n                    {\n                        colorsPicker.map(pickerType => {\n                            return (\n                                <div style={{ display: setting[pickerType.setting]['show'] || pickerType.setting === 'font' ? '' : 'none' }}>\n                                    <p>{pickerType.name}:</p>\n                                    <div className=\"opacityAndLineWidth\">\n                                        <div>\n                                            <p>透明度:</p>\n                                            <input\n                                                type=\"range\"\n                                                id={pickerType.setting}\n                                                name={pickerType.setting + '.opacity'}\n                                                min=\"0\"\n                                                max=\"1\"\n                                                step=\"0.1\"\n                                                defaultValue={setting[pickerType.setting]['opacity']}\n                                                onChange={onChangeSlider} />\n                                            <p>{setting[pickerType.setting]['opacity']}</p>\n                                        </div>\n                                        <div style={{ display: setting[pickerType.setting]['lineWidth'] ? '' : 'none' }}>\n                                            <p>线条宽度:</p>\n                                            <input\n                                                type=\"range\"\n                                                id={pickerType.setting}\n                                                name={pickerType.setting + '.lineWidth'}\n                                                min=\"1\"\n                                                max=\"500\"\n                                                defaultValue={setting[pickerType.setting]['lineWidth']}\n                                                onChange={onChangeSlider} />\n                                            <p>{setting[pickerType.setting]['lineWidth']}</p>\n                                        </div>\n                                    </div>\n                                    <div className=\"color-grid\" style={{ display: pickerType.showAllColors ? 'none' : '' }}>\n                                        {\n                                            someColors.map(color => {\n                                                if (color === 'transparent') {\n                                                    return <div style={{ display: 'inline-block', backgroundColor: color }}\n                                                        data-value={color}\n                                                        onClick={onChangeColor}\n                                                        onKeyDown={onKeyEnterColor}\n                                                        tabindex=\"0\"\n                                                        role=\"button\"\n                                                        className=\"one-color\"\n                                                        data-setting={pickerType.setting}>\n                                                        <img src={transparentIcon}\n                                                            className=\"one-color\"\n                                                            alt=\"transparent icon\"\n                                                        >\n                                                        </img>\n                                                    </div>\n                                                } else {\n                                                    return <span className=\"one-color\"\n                                                        style={{ display: 'inline-block', backgroundColor: color }}\n                                                        data-value={color}\n                                                        onClick={onChangeColor}\n                                                        onKeyDown={onKeyEnterColor}\n                                                        tabindex=\"0\"\n                                                        role=\"button\"\n                                                        data-setting={pickerType.setting}>\n                                                        {setting[pickerType.setting]['color'].replace(/[^,]+(?=\\))/g, 1) === color ? 'x' : ''}\n                                                    </span>\n                                                }\n                                            })\n                                        }\n                                        <span\n                                            className=\"more-color\"\n                                            onClick={onShowMoreColors}\n                                            onKeyDown={onKeyEnterShowMoreColor}\n                                            tabindex=\"0\"\n                                            role=\"button\"\n                                            data-setting={pickerType.setting}>\n                                            更多颜色\n                                            </span>\n                                    </div>\n                                    <div\n                                        className=\"color-grid\"\n                                        style={{ display: !pickerType.showAllColors ? 'none' : '' }}>\n                                        {\n                                            allColors.map(color => {\n                                                if (color === 'transparent') {\n                                                    return <div style={{ display: 'inline-block', backgroundColor: color }}\n                                                        data-value={color}\n                                                        onClick={onChangeColor}\n                                                        onKeyDown={onKeyEnterColor}\n                                                        tabindex=\"0\"\n                                                        role=\"button\"\n                                                        className=\"one-color\"\n                                                        data-setting={pickerType.setting}>\n                                                        <img\n                                                            src={transparentIcon}\n                                                            className=\"one-color\"\n                                                            alt=\"transparent icon\"\n                                                        ></img>\n                                                    </div>\n                                                } else {\n                                                    return <span\n                                                        className=\"one-color\"\n                                                        style={{ display: 'inline-block', backgroundColor: color }}\n                                                        data-value={color}\n                                                        onClick={onChangeColor}\n                                                        onKeyDown={onKeyEnterColor}\n                                                        tabindex=\"0\"\n                                                        role=\"button\"\n                                                        data-setting={pickerType.setting}>\n                                                        {setting[pickerType.setting]['color'].replace(/[^,]+(?=\\))/g, 1) === color ? 'x' : ''}\n                                                    </span>\n                                                }\n                                            })\n                                        }\n                                        <span\n                                            className=\"more-color\"\n                                            onClick={onShowMoreColors}\n                                            onKeyDown={onKeyEnterShowMoreColor}\n                                            tabindex=\"0\"\n                                            role=\"button\"\n                                            data-setting={pickerType.setting}>\n                                            隐藏颜色\n                                            </span>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            </section>\n            <ISSO title=\"图片拼接\" slug={`add-watermark/`} />\n        </Layout>\n    )\n}"],"sourceRoot":""}